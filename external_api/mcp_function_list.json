[
  {
    "desc": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
    "kind": "mcp",
    "name": "context7__mcp__resolve_library_id",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "libraryName": {
          "description": "Library name to search for and retrieve a Context7-compatible library ID.",
          "type": "string"
        }
      },
      "required": [
        "libraryName"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
    "kind": "mcp",
    "name": "context7__mcp__get_library_docs",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "context7CompatibleLibraryID": {
          "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'.",
          "type": "string"
        },
        "tokens": {
          "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens.",
          "type": "number"
        },
        "topic": {
          "description": "Topic to focus documentation on (e.g., 'hooks', 'routing').",
          "type": "string"
        }
      },
      "required": [
        "context7CompatibleLibraryID"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Convert an address into geographic coordinates",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_geocode",
    "parameters": {
      "properties": {
        "address": {
          "description": "The address to geocode",
          "type": "string"
        }
      },
      "required": [
        "address"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Convert coordinates into an address",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_reverse_geocode",
    "parameters": {
      "properties": {
        "latitude": {
          "description": "Latitude coordinate",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude coordinate",
          "type": "number"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Search for places using Google Places API",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_search_places",
    "parameters": {
      "properties": {
        "location": {
          "description": "Optional center point for the search",
          "properties": {
            "latitude": {
              "type": "number"
            },
            "longitude": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "query": {
          "description": "Search query",
          "type": "string"
        },
        "radius": {
          "description": "Search radius in meters (max 50000)",
          "type": "number"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get detailed information about a specific place",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_place_details",
    "parameters": {
      "properties": {
        "place_id": {
          "description": "The place ID to get details for",
          "type": "string"
        }
      },
      "required": [
        "place_id"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Calculate travel distance and time for multiple origins and destinations",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_distance_matrix",
    "parameters": {
      "properties": {
        "destinations": {
          "description": "Array of destination addresses or coordinates",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mode": {
          "description": "Travel mode (driving, walking, bicycling, transit)",
          "enum": [
            "driving",
            "walking",
            "bicycling",
            "transit"
          ],
          "type": "string"
        },
        "origins": {
          "description": "Array of origin addresses or coordinates",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "origins",
        "destinations"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get directions between two points",
    "kind": "mcp",
    "name": "minimax_google_maps__mcp__maps_directions",
    "parameters": {
      "properties": {
        "destination": {
          "description": "Ending point address or coordinates",
          "type": "string"
        },
        "mode": {
          "description": "Travel mode (driving, walking, bicycling, transit)",
          "enum": [
            "driving",
            "walking",
            "bicycling",
            "transit"
          ],
          "type": "string"
        },
        "origin": {
          "description": "Starting point address or coordinates",
          "type": "string"
        }
      },
      "required": [
        "origin",
        "destination"
      ],
      "type": "object"
    }
  },
  {
    "desc": "When the nodeId cannot be obtained, obtain the layout information about the entire Figma file",
    "kind": "mcp",
    "name": "minimax_figma__mcp__get_figma_data",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "depth": {
          "description": "OPTIONAL. Do NOT use unless explicitly requested by the user. Controls how many levels deep to traverse the node tree,",
          "type": "number"
        },
        "fileKey": {
          "description": "The key of the Figma file to fetch, often found in a provided URL like figma.com/(file|design)/<fileKey>/...",
          "type": "string"
        },
        "nodeId": {
          "description": "The ID of the node to fetch, often found as URL parameter node-id=<nodeId>, always use if provided",
          "type": "string"
        }
      },
      "required": [
        "fileKey"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Download SVG and PNG images used in a Figma file based on the IDs of image or icon nodes",
    "kind": "mcp",
    "name": "minimax_figma__mcp__download_figma_images",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "fileKey": {
          "description": "The key of the Figma file containing the node",
          "type": "string"
        },
        "localPath": {
          "description": "The absolute path to the directory where images are stored in the project. If the directory does not exist, it will be created. The format of this path should respect the directory format of the operating system you are running on. Don't use any special character escaping in the path name either.",
          "type": "string"
        },
        "nodes": {
          "description": "The nodes to fetch as images",
          "items": {
            "additionalProperties": false,
            "properties": {
              "fileName": {
                "description": "The local name for saving the fetched file",
                "type": "string"
              },
              "imageRef": {
                "description": "If a node has an imageRef fill, you must include this variable. Leave blank when downloading Vector SVG images.",
                "type": "string"
              },
              "nodeId": {
                "description": "The ID of the Figma image node to fetch, formatted as 1234:5678",
                "type": "string"
              }
            },
            "required": [
              "nodeId",
              "fileName"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "pngScale": {
          "default": 2,
          "description": "Export scale for PNG images. Optional, defaults to 2 if not specified. Affects PNG images only.",
          "exclusiveMinimum": 0,
          "type": "number"
        },
        "svgOptions": {
          "additionalProperties": false,
          "default": {},
          "description": "Options for SVG export",
          "properties": {
            "includeId": {
              "default": false,
              "description": "Whether to include IDs in SVG exports. Default is false.",
              "type": "boolean"
            },
            "outlineText": {
              "default": true,
              "description": "Whether to outline text in SVG exports. Default is true.",
              "type": "boolean"
            },
            "simplifyStroke": {
              "default": true,
              "description": "Whether to simplify strokes in SVG exports. Default is true.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "fileKey",
        "nodes",
        "localPath"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create or update a single file in a GitHub repository",
    "kind": "mcp",
    "name": "minimax_github__mcp__create_or_update_file",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "branch": {
          "description": "Branch to create/update the file in",
          "type": "string"
        },
        "content": {
          "description": "Content of the file",
          "type": "string"
        },
        "message": {
          "description": "Commit message",
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "path": {
          "description": "Path where to create/update the file",
          "type": "string"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        },
        "sha": {
          "description": "SHA of the file being replaced (required when updating existing files)",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "path",
        "content",
        "message",
        "branch"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Search for GitHub repositories",
    "kind": "mcp",
    "name": "minimax_github__mcp__search_repositories",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "page": {
          "description": "Page number for pagination (default: 1)",
          "type": "number"
        },
        "perPage": {
          "description": "Number of results per page (default: 30, max: 100)",
          "type": "number"
        },
        "query": {
          "description": "Search query (see GitHub search syntax)",
          "type": "string"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a new GitHub repository in your account",
    "kind": "mcp",
    "name": "minimax_github__mcp__create_repository",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "autoInit": {
          "description": "Initialize with README.md",
          "type": "boolean"
        },
        "description": {
          "description": "Repository description",
          "type": "string"
        },
        "name": {
          "description": "Repository name",
          "type": "string"
        },
        "private": {
          "description": "Whether the repository should be private",
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get the contents of a file or directory from a GitHub repository",
    "kind": "mcp",
    "name": "minimax_github__mcp__get_file_contents",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "branch": {
          "description": "Branch to get contents from",
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "path": {
          "description": "Path to the file or directory",
          "type": "string"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "path"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Push multiple files to a GitHub repository in a single commit",
    "kind": "mcp",
    "name": "minimax_github__mcp__push_files",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "branch": {
          "description": "Branch to push to (e.g., 'main' or 'master')",
          "type": "string"
        },
        "files": {
          "description": "Array of files to push",
          "items": {
            "additionalProperties": false,
            "properties": {
              "content": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            },
            "required": [
              "path",
              "content"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "Commit message",
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "branch",
        "files",
        "message"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a new issue in a GitHub repository",
    "kind": "mcp",
    "name": "minimax_github__mcp__create_issue",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "assignees": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "body": {
          "type": "string"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "milestone": {
          "type": "number"
        },
        "owner": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "title"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a new pull request in a GitHub repository",
    "kind": "mcp",
    "name": "minimax_github__mcp__create_pull_request",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "The name of the branch you want the changes pulled into",
          "type": "string"
        },
        "body": {
          "description": "Pull request body/description",
          "type": "string"
        },
        "draft": {
          "description": "Whether to create the pull request as a draft",
          "type": "boolean"
        },
        "head": {
          "description": "The name of the branch where your changes are implemented",
          "type": "string"
        },
        "maintainer_can_modify": {
          "description": "Whether maintainers can modify the pull request",
          "type": "boolean"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        },
        "title": {
          "description": "Pull request title",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "title",
        "head",
        "base"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Fork a GitHub repository to your account or specified organization",
    "kind": "mcp",
    "name": "minimax_github__mcp__fork_repository",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "organization": {
          "description": "Optional: organization to fork to (defaults to your personal account)",
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a new branch in a GitHub repository",
    "kind": "mcp",
    "name": "minimax_github__mcp__create_branch",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "branch": {
          "description": "Name for the new branch",
          "type": "string"
        },
        "from_branch": {
          "description": "Optional: source branch to create from (defaults to the repository's default branch)",
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get list of commits of a branch in a GitHub repository",
    "kind": "mcp",
    "name": "minimax_github__mcp__list_commits",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "owner": {
          "type": "string"
        },
        "page": {
          "type": "number"
        },
        "perPage": {
          "type": "number"
        },
        "repo": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo"
      ],
      "type": "object"
    }
  },
  {
    "desc": "List issues in a GitHub repository with filtering options",
    "kind": "mcp",
    "name": "minimax_github__mcp__list_issues",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "direction": {
          "enum": [
            "asc",
            "desc"
          ],
          "type": "string"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "owner": {
          "type": "string"
        },
        "page": {
          "type": "number"
        },
        "per_page": {
          "type": "number"
        },
        "repo": {
          "type": "string"
        },
        "since": {
          "type": "string"
        },
        "sort": {
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "type": "string"
        },
        "state": {
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Update an existing issue in a GitHub repository",
    "kind": "mcp",
    "name": "minimax_github__mcp__update_issue",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "assignees": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "body": {
          "type": "string"
        },
        "issue_number": {
          "type": "number"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "milestone": {
          "type": "number"
        },
        "owner": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "state": {
          "enum": [
            "open",
            "closed"
          ],
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Add a comment to an existing issue",
    "kind": "mcp",
    "name": "minimax_github__mcp__add_issue_comment",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "body": {
          "type": "string"
        },
        "issue_number": {
          "type": "number"
        },
        "owner": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number",
        "body"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Search for code across GitHub repositories",
    "kind": "mcp",
    "name": "minimax_github__mcp__search_code",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "order": {
          "enum": [
            "asc",
            "desc"
          ],
          "type": "string"
        },
        "page": {
          "minimum": 1,
          "type": "number"
        },
        "per_page": {
          "maximum": 100,
          "minimum": 1,
          "type": "number"
        },
        "q": {
          "type": "string"
        }
      },
      "required": [
        "q"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Search for issues and pull requests across GitHub repositories",
    "kind": "mcp",
    "name": "minimax_github__mcp__search_issues",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "order": {
          "enum": [
            "asc",
            "desc"
          ],
          "type": "string"
        },
        "page": {
          "minimum": 1,
          "type": "number"
        },
        "per_page": {
          "maximum": 100,
          "minimum": 1,
          "type": "number"
        },
        "q": {
          "type": "string"
        },
        "sort": {
          "enum": [
            "comments",
            "reactions",
            "reactions-+1",
            "reactions--1",
            "reactions-smile",
            "reactions-thinking_face",
            "reactions-heart",
            "reactions-tada",
            "interactions",
            "created",
            "updated"
          ],
          "type": "string"
        }
      },
      "required": [
        "q"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Search for users on GitHub",
    "kind": "mcp",
    "name": "minimax_github__mcp__search_users",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "order": {
          "enum": [
            "asc",
            "desc"
          ],
          "type": "string"
        },
        "page": {
          "minimum": 1,
          "type": "number"
        },
        "per_page": {
          "maximum": 100,
          "minimum": 1,
          "type": "number"
        },
        "q": {
          "type": "string"
        },
        "sort": {
          "enum": [
            "followers",
            "repositories",
            "joined"
          ],
          "type": "string"
        }
      },
      "required": [
        "q"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get details of a specific issue in a GitHub repository.",
    "kind": "mcp",
    "name": "minimax_github__mcp__get_issue",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "issue_number": {
          "type": "number"
        },
        "owner": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get details of a specific pull request",
    "kind": "mcp",
    "name": "minimax_github__mcp__get_pull_request",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "pull_number": {
          "description": "Pull request number",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "List and filter repository pull requests",
    "kind": "mcp",
    "name": "minimax_github__mcp__list_pull_requests",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "Filter by base branch name",
          "type": "string"
        },
        "direction": {
          "description": "The direction of the sort",
          "enum": [
            "asc",
            "desc"
          ],
          "type": "string"
        },
        "head": {
          "description": "Filter by head user or head organization and branch name",
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "page": {
          "description": "Page number of the results",
          "type": "number"
        },
        "per_page": {
          "description": "Results per page (max 100)",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        },
        "sort": {
          "description": "What to sort results by",
          "enum": [
            "created",
            "updated",
            "popularity",
            "long-running"
          ],
          "type": "string"
        },
        "state": {
          "description": "State of the pull requests to return",
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a review on a pull request",
    "kind": "mcp",
    "name": "minimax_github__mcp__create_pull_request_review",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "body": {
          "description": "The body text of the review",
          "type": "string"
        },
        "comments": {
          "description": "Comments to post as part of the review (specify either position or line, not both)",
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "body": {
                    "description": "Text of the review comment",
                    "type": "string"
                  },
                  "path": {
                    "description": "The relative path to the file being commented on",
                    "type": "string"
                  },
                  "position": {
                    "description": "The position in the diff where you want to add a review comment",
                    "type": "number"
                  }
                },
                "required": [
                  "path",
                  "position",
                  "body"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "body": {
                    "description": "Text of the review comment",
                    "type": "string"
                  },
                  "line": {
                    "description": "The line number in the file where you want to add a review comment",
                    "type": "number"
                  },
                  "path": {
                    "description": "The relative path to the file being commented on",
                    "type": "string"
                  }
                },
                "required": [
                  "path",
                  "line",
                  "body"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        },
        "commit_id": {
          "description": "The SHA of the commit that needs a review",
          "type": "string"
        },
        "event": {
          "description": "The review action to perform",
          "enum": [
            "APPROVE",
            "REQUEST_CHANGES",
            "COMMENT"
          ],
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "pull_number": {
          "description": "Pull request number",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "body",
        "event"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Merge a pull request",
    "kind": "mcp",
    "name": "minimax_github__mcp__merge_pull_request",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "commit_message": {
          "description": "Extra detail to append to automatic commit message",
          "type": "string"
        },
        "commit_title": {
          "description": "Title for the automatic commit message",
          "type": "string"
        },
        "merge_method": {
          "description": "Merge method to use",
          "enum": [
            "merge",
            "squash",
            "rebase"
          ],
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "pull_number": {
          "description": "Pull request number",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get the list of files changed in a pull request",
    "kind": "mcp",
    "name": "minimax_github__mcp__get_pull_request_files",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "pull_number": {
          "description": "Pull request number",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get the combined status of all status checks for a pull request",
    "kind": "mcp",
    "name": "minimax_github__mcp__get_pull_request_status",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "pull_number": {
          "description": "Pull request number",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Update a pull request branch with the latest changes from the base branch",
    "kind": "mcp",
    "name": "minimax_github__mcp__update_pull_request_branch",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "expected_head_sha": {
          "description": "The expected SHA of the pull request's HEAD ref",
          "type": "string"
        },
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "pull_number": {
          "description": "Pull request number",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get the review comments on a pull request",
    "kind": "mcp",
    "name": "minimax_github__mcp__get_pull_request_comments",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "pull_number": {
          "description": "Pull request number",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get the reviews on a pull request",
    "kind": "mcp",
    "name": "minimax_github__mcp__get_pull_request_reviews",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "owner": {
          "description": "Repository owner (username or organization)",
          "type": "string"
        },
        "pull_number": {
          "description": "Pull request number",
          "type": "number"
        },
        "repo": {
          "description": "Repository name",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create or update a single file in a GitLab project",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__create_or_update_file",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "branch": {
          "description": "Branch to create/update the file in",
          "type": "string"
        },
        "commit_message": {
          "description": "Commit message",
          "type": "string"
        },
        "content": {
          "description": "Content of the file",
          "type": "string"
        },
        "file_path": {
          "description": "Path where to create/update the file",
          "type": "string"
        },
        "previous_path": {
          "description": "Path of the file to move/rename",
          "type": "string"
        },
        "project_id": {
          "description": "Project ID or URL-encoded path",
          "type": "string"
        }
      },
      "required": [
        "project_id",
        "file_path",
        "content",
        "commit_message",
        "branch"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Search for GitLab projects",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__search_repositories",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "page": {
          "description": "Page number for pagination (default: 1)",
          "type": "number"
        },
        "per_page": {
          "description": "Number of results per page (default: 20)",
          "type": "number"
        },
        "search": {
          "description": "Search query",
          "type": "string"
        }
      },
      "required": [
        "search"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a new GitLab project",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__create_repository",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "Repository description",
          "type": "string"
        },
        "initialize_with_readme": {
          "description": "Initialize with README.md",
          "type": "boolean"
        },
        "name": {
          "description": "Repository name",
          "type": "string"
        },
        "visibility": {
          "description": "Repository visibility level",
          "enum": [
            "private",
            "internal",
            "public"
          ],
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Get the contents of a file or directory from a GitLab project",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__get_file_contents",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "file_path": {
          "description": "Path to the file or directory",
          "type": "string"
        },
        "project_id": {
          "description": "Project ID or URL-encoded path",
          "type": "string"
        },
        "ref": {
          "description": "Branch/tag/commit to get contents from",
          "type": "string"
        }
      },
      "required": [
        "project_id",
        "file_path"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Push multiple files to a GitLab project in a single commit",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__push_files",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "branch": {
          "description": "Branch to push to",
          "type": "string"
        },
        "commit_message": {
          "description": "Commit message",
          "type": "string"
        },
        "files": {
          "description": "Array of files to push",
          "items": {
            "additionalProperties": false,
            "properties": {
              "content": {
                "description": "Content of the file",
                "type": "string"
              },
              "file_path": {
                "description": "Path where to create the file",
                "type": "string"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "project_id": {
          "description": "Project ID or URL-encoded path",
          "type": "string"
        }
      },
      "required": [
        "project_id",
        "branch",
        "files",
        "commit_message"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a new issue in a GitLab project",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__create_issue",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "assignee_ids": {
          "description": "Array of user IDs to assign",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "description": {
          "description": "Issue description",
          "type": "string"
        },
        "labels": {
          "description": "Array of label names",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "milestone_id": {
          "description": "Milestone ID to assign",
          "type": "number"
        },
        "project_id": {
          "description": "Project ID or URL-encoded path",
          "type": "string"
        },
        "title": {
          "description": "Issue title",
          "type": "string"
        }
      },
      "required": [
        "project_id",
        "title"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a new merge request in a GitLab project",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__create_merge_request",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "allow_collaboration": {
          "description": "Allow commits from upstream members",
          "type": "boolean"
        },
        "description": {
          "description": "Merge request description",
          "type": "string"
        },
        "draft": {
          "description": "Create as draft merge request",
          "type": "boolean"
        },
        "project_id": {
          "description": "Project ID or URL-encoded path",
          "type": "string"
        },
        "source_branch": {
          "description": "Branch containing changes",
          "type": "string"
        },
        "target_branch": {
          "description": "Branch to merge into",
          "type": "string"
        },
        "title": {
          "description": "Merge request title",
          "type": "string"
        }
      },
      "required": [
        "project_id",
        "title",
        "source_branch",
        "target_branch"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Fork a GitLab project to your account or specified namespace",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__fork_repository",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "namespace": {
          "description": "Namespace to fork to (full path)",
          "type": "string"
        },
        "project_id": {
          "description": "Project ID or URL-encoded path",
          "type": "string"
        }
      },
      "required": [
        "project_id"
      ],
      "type": "object"
    }
  },
  {
    "desc": "Create a new branch in a GitLab project",
    "kind": "mcp",
    "name": "minimax_gitlab__mcp__create_branch",
    "parameters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": false,
      "properties": {
        "branch": {
          "description": "Name for the new branch",
          "type": "string"
        },
        "project_id": {
          "description": "Project ID or URL-encoded path",
          "type": "string"
        },
        "ref": {
          "description": "Source branch/commit for new branch",
          "type": "string"
        }
      },
      "required": [
        "project_id",
        "branch"
      ],
      "type": "object"
    }
  }
]